# Project: Lightweight Local Notion Clone (Google Sheets Dashboard GUI)

## Core Guidelines
- Always prioritize simplicity: Use vanilla JS/HTML/CSS where possible. Only introduce libraries if essential (e.g., googleapis for Sheets API, Chart.js for dashboards). Avoid heavy frameworks like full React unless reactivity is critical—prefer Svelte or Vue if needed.
- Focus on lightweight code: Aim for minimal dependencies to reduce crashes. No unnecessary features; stick to outlined specs.
- Error Handling: Wrap all API calls and user interactions in try-catch. Log errors to console with clear messages. Handle offline scenarios gracefully (e.g., cache in localStorage).
- Modularity: Structure code in small files/modules (e.g., sync.js, ui.js, notes.js). Use ES6+ syntax.
- Testing: Suggest unit tests for key functions (e.g., sync logic) using Jest if added.
- Documentation: Add JSDoc comments to functions. Inline comments for complex logic.

## Tech Stack Constraints
- Frontend: HTML/CSS/JS primary; optional: Svelte/Vue for UI.
- Backend: Google Sheets API (Node.js/googleapis or browser-based).
- Local Server: Use Node.js/Express for dev; package with Electron for desktop.
- No Cloud: All runs locally; sync only via Google APIs.

## Feature-Specific Rules
- Sync: Bi-directional with Google Sheets. Poll every 30s; use timestamps for conflict resolution (last-write-wins).
- Search: Implement fuzzy search (e.g., via JS filter) on loaded data.
- Notes: Store in separate sheet tab; support hyperlink insertion (e.g., <a> tags in notes).
- Multi-Device: Assume same Gmail login; no custom auth.
- Dashboard: Simple tables/charts; pull from Sheets tabs.

## AI Interaction Style
- Be concise in suggestions: Provide code snippets directly.
- Explain changes: When refactoring, note why (e.g., "Simplified to reduce deps").
- Ask for clarification: If spec ambiguous, query user.
- Align with Outline: Reference the project outline document for all decisions.

Terminal Rules (Windows 11 / PowerShell 7)
Use PowerShell 7 (pwsh.exe) only.
All commands must be non‑interactive. Always pass flags to avoid prompts:
npm/npx: --yes, --silent
git: auto upstream; never invoke wizards
gh: --repo, --confirm, prompt=disabled
Disable pagers: pipe output where needed (| Write-Host or | cat) and prefer commands that exit cleanly.
When a tool might prompt, set env first (per AGCursorTerminals.md) and retry with non‑interactive flags.
Command Safety
Long‑running tasks must run detached or backgrounded and log to a file (PowerShell: Start-Process pwsh -ArgumentList '-NoProfile','-Command','<cmd> 2>&1 | Tee-Object .\\run.log').
If a port conflict occurs, free it non‑interactively (PowerShell): Get-NetTCPConnection -LocalPort 3000 -EA SilentlyContinue | % { Stop-Process -Id $_.OwningProcess -Force }.
Git/GitHub Defaults
Assume main as default branch, push.autoSetupRemote=true.
If remote is missing, set it explicitly; do not run interactive auth. If auth is needed, instruct user to set GH_TOKEN.
Project Ground Rules
Source of truth for terminal behavior lives in AG*.md. Agents must look for and follow AG*.md at repo root (e.g., AGCursorTerminals.md) before running any command.
Keep all data local; do not export PHI. XLSX is the persistence layer.
Agent Workflow Expectations
Before executing: read .cursorrules and any AG*.md.
Prefer idempotent, single‑shot commands over interactive flows.
If a command “hangs”, immediately rerun with non‑interactive flags or pipe output; do not wait.

## Non‑Interactive Environment Defaults (Agents MUST enforce)
- Set for the session if missing before running terminal commands:
  - `$env:GIT_PAGER='cat'; $env:PAGER='cat'`
  - `$env:GH_PROMPT='disabled'`
  - `$env:GIT_TERMINAL_PROMPT='0'` and `$env:GCM_INTERACTIVE='Never'`
- Prefer commands that add flags: npm/npx `--yes --silent`, gh `--confirm`.
- For long tasks: `Start-Process pwsh -ArgumentList '-NoProfile','-Command','<cmd> 2>&1 | Tee-Object .\\run.log'`.